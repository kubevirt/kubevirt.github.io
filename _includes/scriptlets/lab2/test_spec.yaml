test:
  name: Lab Two
  url: https://kubevirt.io/labs/kubernetes/lab2
  source: ../../../labs/kubernetes/lab2.md
  requirements:
    - file:
        path: "./virtctl"
        present: true
        executable: true
    - command:
        name: kubectl
        test: kubectl get pods --namespace kube-system

  steps:
    - step: 1
      name: Get Storage Setup Manifest
      filename: "01_get_storage_manifest.sh"
      test: "test -f storage-setup.yml"
      stdout: "‘storage-setup.yml’ saved"
      revert: "rm ./storage-setup.yml"

    - step: 2
      name: Get CDI Controller Manifest
      filename: "02_get_cdi_controller_manifest.sh"
      test: "test -f cdi-controller.yaml"
      stdout: "‘cdi-controller.yaml’ saved"
      revert: "rm ./cdi-controller.yaml"

    - step: 3
      name: Create Storage
      filename: "03_create_storage.sh"
      test: "kubectl get pods --namespace kube-system storage-provisioner"
      # revert:
      stdout: |
        deployment.extensions/hostpath-provisioner created
        clusterrole.rbac.authorization.k8s.io/hostpath-provisioner created
        clusterrolebinding.rbac.authorization.k8s.io/hostpath-provisioner created
        storageclass.storage.k8s.io/hostpath created
      wait_for:
        poll: "kubectl get pods --namespace kube-system storage-provisioner -o json | jq --raw-output '.status.phase'"
        match: 'Running'
        rate: 5
        tries: 12

    - step: 4
      name: Create CDI Controller
      filename: "04_create_cdi-controller.sh"
      test: false
      wait_for:
        poll: "kubectl get pods --namespace kube-system | grep cdi- | grep Running | wc -l"
        match: "3"
        rate: 5
        tries: 12
      stdout: |        
        customresourcedefinition.apiextensions.k8s.io/datavolumes.cdi.kubevirt.io created
        clusterrolebinding.rbac.authorization.k8s.io/cdi-sa created
        clusterrole.rbac.authorization.k8s.io/cdi created
        clusterrolebinding.rbac.authorization.k8s.io/cdi-apiserver created
        clusterrole.rbac.authorization.k8s.io/cdi-apiserver created
        clusterrolebinding.rbac.authorization.k8s.io/cdi-apiserver-auth-delegator created
        serviceaccount/cdi-apiserver created
        rolebinding.rbac.authorization.k8s.io/cdi-apiserver created
        role.rbac.authorization.k8s.io/cdi-apiserver created
        rolebinding.rbac.authorization.k8s.io/cdi-extension-apiserver-authentication created
        role.rbac.authorization.k8s.io/cdi-extension-apiserver-authentication created
        service/cdi-api created
        deployment.apps/cdi-apiserver created
        serviceaccount/cdi-sa created
        deployment.apps/cdi-deployment created
        service/cdi-uploadproxy created
        deployment.apps/cdi-uploadproxy created

    # - step: 5
    #   name: "View CDI Pod Status"
    #   filename: "05_view_cdi_pod_status.sh"
    #   test: false

    # - step: 6
    #   name: "Create Fedora Cloud Instance"
    #   filename: "06_create_fedora_cloud_instance.sh"
    #   test: false
    #   stdout: |
    #     persistentvolumeclaim/fedora created
      
  cleanup:
    - rm storage-setup.yml
    - rm cdi-controller.yaml
