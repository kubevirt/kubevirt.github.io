test:
  name: Quickstart Kubevirt with Kind
  url: https://kubevirt.io/quickstart_kind/
  source: ../../../pages/quickstart_kind.md
  steps:
    - step: 0
      name: Check Host VM Extensions
      filename: 00_verify_nested_virt.sh
      skip: true

    - step: 1
      name: Set up the cluster
      filename: 01_setup_cluster.sh
      test: "kind get cluster"
      stdout: "kind"
      skip: false

    - step: 2
      name: Set Version Environment Variable
      filename: 02_setenv_version.sh
      variables:
        - name: 'KUBEVIRT_VERSION'
          value: 'v0.25.0'
      skip: false

    - step: 3
      name: Deploy Kubevirt Operator
      filename: 03_deploy_operator.sh
      wait_for:
        poll: "kubectl -o json get pods --namespace kubevirt | jq --raw-output '.items[] | select(.metadata.name|test(\"^virt-operator-\")) | .status.phase'"
        match: "Running"
        rate: 10
        tries: 18
      revert: "kubectl delete -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-operator.yaml"
      skip: false

    - step: 4
      name: Wait for Operator Pod Running
      filename: 04_check_operator_running.sh
      skip: true

    - step: 5
      name: Check Native VM Extensions Enabled
      filename: 05_verify_virtualization.sh
      skip: true

    - step: 6
      name: Emulate VM Extensions
      filename: 06_emulate_vm_extensions.sh
      test: "kubectl -o json get --namespace kubevirt configmap | jq --raw-output ' .items[] | select(.metadata.name | test(\"kubevirt-config\")) | .data[\"debug.useEmulation\"]' | grep --quiet true"
      stdout: "configmap/kubevirt-config created"
      skip: false

    - step: 7
      name: Deploy Kubevirt
      filename: 07_deploy_kubevirt.sh
      #test: "kubectl -o json get pods --namespace kubevirt | jq --raw-output '[ .items[] | select(.metadata.name|test(\"^virt-\")) | select(.status.phase|test(\"Running\")) ] | length' | grep -v 6"
      stdout: "kubevirt.kubevirt.io/kubevirt created"
      wait_for:
        poll: "kubectl -o json get pods --namespace kubevirt | jq --raw-output '[ .items[] | select(.metadata.name|test(\"^virt-\")) | select(.status.phase|test(\"Running\")) ] | length'"
        match: "6"
        rate: 10
        tries: 18
      revert: "kubectl delete -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-cr.yaml"
      skip: false

    - step: 8
      name: Wait for Kubevirt Pods Running
      filename: 04_check_operator_running.sh
      skip: true

    - step: 9
      name: Get virtctl
      filename: 08_get_virtctl.sh
      test: test -x ./virtctl
      skip: false
      revert: rm ./virtctl

    - step: 10
      name: Create VM
      filename: 10_create_vm.sh
      test: "kubectl get -o json vms testvm"
      stdout: "virtualmachine.kubevirt.io/testvm created"
      revert: "kubectl delete vms testvm"
      skip: false

    - step: 11
      name: Get VMs - Human Readable
      filename: 11_get_vms.sh
      skip: true

    - step: 12
      name: Get VMs - YAML
      filename: 12_get_vms_yaml.sh
      skip: true

    - step: 13
      name: Start VMs
      filename: 13_virtctl_start_vm.sh
      test: "kubectl get vmis testvm"
      revert: "virtctl stop testvm"
      wait_for:
        poll: "kubectl -o json get vmis testvm | jq --raw-output '.status.phase'"
        match: "Running"
        rate: 10
        tries: 18
      skip: false

    - step: 14
      name: Get VMIs - Human Readable
      filename: 14_get_vmis.sh
      skip: true

    - step: 15
      name: Get VMIs - YAML
      filename: 15_get_vmis_yaml.sh
      skip: true

    - step: 16
      name: Check Serial Console
      filename: 16_virtctl_serial_console.sh
      expect:
        - send: "\n"
          expect: "testvm login:"
          timeout: 15
          tries: 20
      skip: false

    - step: 17
      name: Check VNC Console
      filename: 17_virtctl_vnc_console.sh
      skip: true

    - step: 18
      name: Stop VM
      filename: 18_virtctl_stop_vm.sh
      skip: true

    - step: 19
      name: Delete Kubectl
      filename: 19_kubectl_delete_vm.sh
      skip: true

    - step: 20
      name: Delete kind
      filename: 99_kind_delete.sh
      skip: true

  cleanup:
    - rm ./virtctl
    - "kubectl delete -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-cr.yaml"
    - "kubectl delete -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-operator.yaml"
    - kind delete cluster
