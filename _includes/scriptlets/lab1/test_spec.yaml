test:
  name: Lab One
  url: https://kubevirt.io/labs/kubernetes/lab1
  source: ../../../labs/kubernetes/lab1.md
  requirements:
    files:
        - path: "./virtctl"
          present: true
          executable: true
    commands:
        - name: kubectl
          test: kubectl get pods --namespace kube-system

  steps:
    - step: 1
      name: Get Kubevirt VM Manifest
      filename: "01_get_vm_manifest.sh"
      test: "test -f vm.yaml"
      stdout: "‘vm.yaml’ saved"
      revert: "rm ./vm.yaml"

    - step: 2
      name: Create a test VM
      filename: "02_create_testvm.sh"
      test: "kubectl get -o json vms testvm"
      stdout: "virtualmachine.kubevirt.io/testvm created"
      revert: "kubectl delete vms testvm"

    - step: 3
      name: Verify the test VM
      filename: "03_verify_testvm.sh"
      stdout: ""

    - step: 4
      name: Start the test VM
      filename: "04_start_testvm.sh"
      test: "kubectl get vmis testvm"
      revert: "virtctl stop testvm"
      wait_for:
        poll: "kubectl -o json get vmis testvm | jq --raw-output '.status.phase'"
        match: "Running"
        rate: 10
        tries: 18

    - step: 5
      name: Verify that the test VM instance is running
      filename: "05_verify_testvm_instance.sh"
      stdout: ""

    - step: 6
      name: Connect to the test VM console
      filename: "06_connect_to_testvm_console.sh"
      expect:
        - send: "\n"
          expect: "testvm login:"
          timeout: 10
          tries: 12

    - step: 7
      name: Stop the test VM
      filename: "07_stop_testvm.sh"
      test: false
      revert: "virtctl start testvm"
      wait_for:
        poll: "kubectl get vmis testvm"
        match: ".*NotFound.*"
        rate: 10
        tries: 12

    - step: 8
      name: Delete the test VM
      filename: "08_delete_testvm.sh"
      test: "! kubectl get vms testvm"

  cleanup:
    - rm vm.yaml
