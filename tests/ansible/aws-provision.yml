---
- hosts: localhost
  gather_facts: False
  vars:
    build_id: "{{ lookup('env', 'buildID') }}"
  tasks:
  - name: "Fetch AMI Feed"
    get_url:
      url: "https://jenkins-kubevirt.apps.ci.centos.org/job/dev/job/jodavis/job/kvio-lab-images/lastSuccessfulBuild/artifact/new-images.json"
      dest: "./existing-ami.json"
      mode: "0400"
  - name: "Import JSON into variable"
    set_fact:
      recent_ami_json: "{{ lookup('file', 'existing-ami.json') | from_json }}"
  - name: "Save AMI ID For Most Recent us-west-1 Image"
    set_fact:
      recent_ami_id: "{{ recent_ami_json | json_query(\"[?region=='us-west-1'].ami_id\") }}"
  - name: "Launch new instance on AWS"
    register: "ec2"
    ec2:
      aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
      aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
      key_name: "{{ lookup('env','AWS_KEY_NAME') }}"
      group_id: "sg-0d3bbafc626b5601f"
      instance_type: "t2.medium"
      image: "{{ recent_ami_id[0] }}"
      state: "present"
      wait: true
      region: "us-west-1"
      vpc_subnet_id: "subnet-06841259e5431c9ed"
      assign_public_ip: "yes"
      instance_tags:
        KubevirtCI: "yes"
        Name: "kubevirt-labci-build{{ build_id }}"
  - name: "Write instance ID to /tmp/launched_instances"
    copy:
      content: '{{ ec2.instance_ids }}'
      dest: "/tmp/launched_instances"
    delegate_to: "localhost"
  - name: "Write instance IP to /tmp/inventory"
    copy:
      content: '{{ ec2.instances[0].public_ip }}'
      dest: "/tmp/inventory"
    delegate_to: "localhost"
  - name: "Wait for SSH to become available"
    wait_for:
      host: "{{ ec2.instances[0].public_ip }}"
      port: 22
      timeout: 620
      state: "started"
  - name: "Give kubevirt Containers Time To Start"
    pause:
      minutes: 5
## TODO: Below is more ideal than an arbitrary wait but I couldn't get it to use the private key
#  - name: "Block Until All Pods In The kubevirt Namespace Show Ready"
#    register: kubevirt_pod_status
#    shell: kubectl get pods -n kubevirt -o json | jq -r '.items[].status.conditions[] | select(.type=="Ready") .status' | uniq
#    until: kubevirt_pod_status.stdout == "Ready"
#    delegate_to: "centos@{{ ec2.instances[0].public_ip }}"
#    retries: 20
#    delay: 2
